{"name": "get请求查询用户数据列表", "status": "failed", "statusDetails": {"message": "AssertionError: 第1个断言失败 -|- 实际结果:{'msg': '无效token', 'status': 400} || 预期结果: {'msg': '获取管理员列表成功', 'status': 200}", "trace": "cls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n>               assert actual == v\nE               AssertionError\n\ntools\\data_process.py:119: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\ncases = ['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', ...]\n\n    def test_main(cases):   # 不使用数据库功能\n        # 发送请求\n        response, expect, sql = BaseRequest.send_request(cases)\n        # 断言操作\n>       DataProcess.assert_result(response, expect)\n\ntest\\test_api.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'tools.data_process.DataProcess'>\nresponse = {'data': None, 'meta': {'msg': '无效token', 'status': 400}}\nexpect_str = '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}'\n\n    @classmethod\n    def assert_result(cls, response: dict, expect_str: str):\n        \"\"\" 预期结果实际结果断言方法\n        :param response: 实际响应结果\n        :param expect_str: 预期响应内容，从excel中读取\n        return None\n        \"\"\"\n        # 后置sql变量转换\n        expect_str = rep_expr(expect_str, DataProcess.response_dict)\n        expect_dict = convert_json(expect_str)\n        index = 0\n        for k, v in expect_dict.items():\n            # 获取需要断言的实际结果部分\n            actual = extractor(response, k)\n            index += 1\n            logger.info(\n                f'第{index}个断言,实际结果:{actual} | 预期结果:{v} \\n断言结果 {actual == v}')\n            allure_step(f'第{index}个断言', f'实际结果:{actual} = 预期结果:{v}')\n            try:\n                assert actual == v\n            except AssertionError:\n>               raise AssertionError(\n                    f'第{index}个断言失败 -|- 实际结果:{actual} || 预期结果: {v}')\nE               AssertionError: 第1个断言失败 -|- 实际结果:{'msg': '无效token', 'status': 400} || 预期结果: {'msg': '获取管理员列表成功', 'status': 200}\n\ntools\\data_process.py:121: AssertionError"}, "steps": [{"name": "请求地址", "status": "passed", "attachments": [{"name": "请求地址", "source": "4bc3ef3d-cc9d-4804-91cb-7c0f31d6bb2e-attachment.txt", "type": "text/plain"}], "start": 1619797413801, "stop": 1619797413802}, {"name": "请求头", "status": "passed", "attachments": [{"name": "请求头", "source": "b75050a9-97b2-4c1c-95dd-d91881bca338-attachment.txt", "type": "text/plain"}], "start": 1619797413802, "stop": 1619797413803}, {"name": "请求参数", "status": "passed", "attachments": [{"name": "请求参数", "source": "602b5f32-3b26-4036-aebe-7a14f839d975-attachment.txt", "type": "text/plain"}], "start": 1619797413803, "stop": 1619797413804}, {"name": "上传文件", "status": "passed", "attachments": [{"name": "上传文件", "source": "b7d20ce1-17ff-43e8-9076-89b3d7652e93-attachment.txt", "type": "text/plain"}], "start": 1619797413804, "stop": 1619797413804}, {"name": "响应耗时(s)", "status": "passed", "attachments": [{"name": "响应耗时(s)", "source": "6de59c8b-3319-42b7-9bf0-62a640c1ffcd-attachment.txt", "type": "text/plain"}], "start": 1619797413846, "stop": 1619797413847}, {"name": "响应内容", "status": "passed", "attachments": [{"name": "响应内容", "source": "e23fc6e5-70a3-4ab9-aa62-9e0bbae3aae2-attachment.txt", "type": "text/plain"}], "start": 1619797413847, "stop": 1619797413848}, {"name": "存储实际响应", "status": "passed", "attachments": [{"name": "存储实际响应", "source": "78cdaf1d-51de-45b5-bf22-8d895bf7a6e8-attachment.txt", "type": "text/plain"}], "start": 1619797413848, "stop": 1619797413849}, {"name": "第1个断言", "status": "passed", "attachments": [{"name": "第1个断言", "source": "b47ada84-02d0-447a-af3c-8d6e0c66950d-attachment.txt", "type": "text/plain"}], "start": 1619797413850, "stop": 1619797413850}], "attachments": [{"name": "stderr", "source": "c403be01-ac6f-49dc-953b-7f4841773d8c-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "cases", "value": "['case_004', 'get请求查询用户数据列表', 'users', '', 'get', 'data', '', '{\"pagenum\": 1, \"pagesize\": \"12\"}', '', '{\"$.meta\":{\"msg\": \"获取管理员列表成功\", \"status\": 200}}', '是']"}], "start": 1619797413801, "stop": 1619797413851, "uuid": "0857babe-4b1e-478a-9fed-8fd2c6c9c645", "historyId": "f9a3a528aa08d345b131e068670a2332", "testCaseId": "881516e7ef2e2aa5436f6a3c3e6a5bcb", "fullName": "test.test_api#test_main", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_api"}, {"name": "host", "value": "LYL"}, {"name": "thread", "value": "11380-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_api"}]}